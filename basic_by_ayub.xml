<?xml version="1.0"?>
<ruleset name="Apex Rules" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
<description>Default Apex PMD Rules</description>

<rule name="ApexSharingViolations" since="5.5.3" message="Apex classes should declare a sharing model if DML or SOQL/SOSL is used" class="net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexSharingViolations"><description>
Detect classes declared without explicit sharing mode if DML methods are used. This
forces the developer to take access restrictions into account before modifying objects.
        </description><priority>3</priority><example>
public without sharing class Foo {
// DML operation here
}
    </example></rule><rule name="ApexOpenRedirect" since="5.5.3" message="Apex classes should safely redirect to a known location" class="net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexOpenRedirect"><description>
Checks against redirects to user-controlled locations. This prevents attackers from
redirecting users to phishing sites.
        </description><priority>3</priority><example>
public without sharing class Foo {
    String unsafeLocation = ApexPage.getCurrentPage().getParameters.get('url_param');
    PageReference page() {
       return new PageReference(unsafeLocation);
    }
}
    </example></rule><rule name="ApexInsecureEndpoint" since="5.5.3" message="Apex callouts should use encrypted communication channels" class="net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexInsecureEndpoint"><description>
Checks against accessing endpoints under plain **http**. You should always use
**https** for security.
        </description><priority>3</priority><example>
public without sharing class Foo {
    void foo() {
        HttpRequest req = new HttpRequest();
        req.setEndpoint('http://localhost:com');
    }
}
    </example></rule><rule name="ApexXSSFromURLParam" since="5.5.3" message="Apex classes should escape/sanitize Strings obtained from URL parameters" class="net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexXSSFromURLParam"><description>
Makes sure that all values obtained from URL parameters are properly escaped / sanitized
to avoid XSS attacks.
        </description><priority>3</priority><example>
public without sharing class Foo {
    String unescapedstring = ApexPage.getCurrentPage().getParameters.get('url_param');
    String usedLater = unescapedstring;
}
    </example></rule><rule name="ApexXSSFromEscapeFalse" since="5.5.3" message="Apex classes should escape Strings in error messages" class="net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromEscapeFalseRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexXSSFromEscapeFalse"><description>
Reports on calls to `addError` with disabled escaping. The message passed to `addError`
will be displayed directly to the user in the UI, making it prime ground for XSS
attacks if unescaped.
        </description><priority>3</priority><example>
public without sharing class Foo {
    Trigger.new[0].addError(vulnerableHTMLGoesHere, false);
}
    </example></rule><rule name="ApexBadCrypto" since="5.5.3" message="Apex classes should use random IV/key" class="net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexBadCrypto"><description>
The rule makes sure you are using randomly generated IVs and keys for `Crypto` calls.
Hard-wiring these values greatly compromises the security of encrypted data.
        </description><priority>3</priority><example>
public without sharing class Foo {
    Blob hardCodedIV = Blob.valueOf('Hardcoded IV 123');
    Blob hardCodedKey = Blob.valueOf('0000000000000000');
    Blob data = Blob.valueOf('Data to be encrypted');
    Blob encrypted = Crypto.encrypt('AES128', hardCodedKey, hardCodedIV, data);
}
    </example></rule><rule name="ApexCSRF" since="5.5.3" message="Avoid making DML operations in Apex class constructor/init method" class="net.sourceforge.pmd.lang.apex.rule.security.ApexCSRFRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexCSRF"><description>
Check to avoid making DML operations in Apex class constructor/init method. This prevents
modification of the database just by accessing a page.
        </description><priority>3</priority><example>
public class Foo {
    public init() {
        insert data;
    }

    public Foo() {
        insert data;
    }
}
    </example></rule><rule name="ApexSOQLInjection" since="5.5.3" message="Avoid untrusted/unescaped variables in DML query" class="net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexSOQLInjection"><description>
            Detects the usage of untrusted / unescaped variables in DML queries.
        </description><priority>3</priority><example>
public class Foo {
    public void test1(String t1) {
        Database.query('SELECT Id FROM Account' + t1);
    }
}
    </example></rule><rule name="ApexCRUDViolation" since="5.5.3" message="Validate CRUD permission before SOQL/DML operation" class="net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexCRUDViolationRule"><description>
The rule validates you are checking for access permissions before a SOQL/SOSL/DML operation.
Since Apex runs in system mode not having proper permissions checks results in escalation of 
privilege and may produce runtime errors. This check forces you to handle such scenarios.
        </description><priority>3</priority><example>
public class Foo {
    public Contact foo(String status, String ID) {
        Contact c = [SELECT Status__c FROM Contact WHERE Id=:ID];

        // Make sure we can update the database before even trying
        if (!Schema.sObjectType.Contact.fields.Name.isUpdateable()) {
            return null;
        }

        c.Status__c = status;
        update c;
        return c;
    }
}
    </example></rule><rule name="ApexDangerousMethods" since="5.5.3" message="Calling potentially dangerous method" class="net.sourceforge.pmd.lang.apex.rule.security.ApexDangerousMethodsRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexDangerousMethodsRule"><description>
Checks against calling dangerous methods.

For the time being, it reports:

* Against `FinancialForce`'s `Configuration.disableTriggerCRUDSecurity()`. Disabling CRUD security
opens the door to several attacks and requires manual validation, which is unreliable.
* Calling `System.debug` passing sensitive data as parameter, which could lead to exposure
of private data.
</description><priority>3</priority><example>
public class Foo {
    public Foo() {
        Configuration.disableTriggerCRUDSecurity();
    }
}
    </example></rule><rule name="ApexSuggestUsingNamedCred" since="5.5.3" message="Suggest named credentials for authentication" class="net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-apex/rules/apex/security.html#ApexSuggestUsingNamedCredRule"><description>
Detects hardcoded credentials used in requests to an endpoint.

You should refrain from hardcoding credentials:
  * They are hard to mantain by being mixed in application code
  * Particularly hard to update them when used from different classes
  * Granting a developer access to the codebase means granting knowledge
     of credentials, keeping a two-level access is not possible.
  * Using different credentials for different environments is troublesome
     and error-prone.

Instead, you should use *Named Credentials* and a callout endpoint.

For more information, you can check [this](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_named_credentials.htm)
</description><priority>3</priority><example>
public class Foo {
    public void foo(String username, String password) {
        Blob headerValue = Blob.valueOf(username + ':' + password);
        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization', authorizationHeader);
    }
}
    </example></rule>



<rule name="ApexUnitTestClassShouldHaveAsserts" message="Test classes must have asserts" class="net.sourceforge.pmd.lang.apex.rule.apexunit.ApexUnitTestClassShouldHaveAsserts">
      <description>
      	Test classes must have asserts
      </description>
        <priority>2</priority> 
      <example>
	<![CDATA[ @isTest
		public class Foo {
		   public static testMethod void testSomething() {
		      Account a = null;
		   // This is better than having a NullPointerException
		   // System.assertNotEquals(a, null, 'account not found');
		   a.toString();
		   }
		}
		]]>
      </example>
    </rule>

<rule name="ApexUnitTestShouldNotUseSeeAllDataTrue" message="Apex unit tests should not use @isTest(seeAllData=true)" class="net.sourceforge.pmd.lang.apex.rule.apexunit.ApexUnitTestShouldNotUseSeeAllDataTrue">
      <description>
      	Apex unit tests should not use @isTest(seeAllData=true) because it opens up the existing database data for unexpected modification by tests.
      </description>
        <priority>2</priority> 
      <example>
	<![CDATA[ @isTest(seeAllData = true)
			public class Foo {
			   public static testMethod void testSomething() {
			      Account a = null;
			   // This is better than having a NullPointerException
			   // System.assertNotEquals(a, null, 'account not found');
			   a.toString();
			   }
			}
		]]>
      </example>
    </rule>

<rule name="AvoidSoqlInLoopsRule" message="Do not query inside loop" class="net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule">
      <description>
      	SOQL must not be placed inside loop as apex allows only 100 queries in a cycle.
      </description>
        <priority>1</priority> 
      <example>
	<![CDATA[ public class Something {
			public static void main( String as[] ) {  
					for (Integer i = 0; i < 10; i++) {
					List<Account> accounts = [SELECT Id FROM Account];
				}
			}
		}
		]]>
      </example>
    </rule>
<rule name="AvoidDmlStatementsInLoops" message="Avoid Dml Statements In Loops" class="net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule">
      <description>
      	DML must not be placed inside loop as apex allows only 150 dmls in a single execution cycle.
      </description>
        <priority>1</priority> 
      <example>
	<![CDATA[ public class Something {
				public void foo() {  
					for (Integer i = 0; i < 151; i++) {
					    Account account;
					    ...
					    insert account;
					}
				}
		}
		]]>
      </example>
    </rule>



	 
	<rule name="AvoidDeeplyNestedIfStmts" message="Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain." class="net.sourceforge.pmd.lang.apex.rule.complexity.AvoidDeeplyNestedIfStmtsRule">
      <description>
      Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.
      </description>
        <priority>3</priority> 
      <example>
		<![CDATA[ public class Foo { public void bar(Integer x, Integer y, Integer z) { if (x>y) {
						if (y>z) {
							if (z==x) {
								// !! too deep
							}
						}
					}
				}
			}
		]]>
      </example>
    </rule>

	
	<rule name="ExcessiveParameterList" message="Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters." class="net.sourceforge.pmd.lang.apex.rule.complexity.ExcessiveParameterListRule">
      <description>
      Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.
      </description>
        <priority>3</priority> 
      <example>
		<![CDATA[ 
// too many arguments liable to be mixed up 
public void addPerson(int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) 
{ ... } 

// preferred approach public void addPerson(Date birthdate, BodyMeasurements measurements, int ssn) 
{ ... } 
]]>
      </example>
    </rule>
	
	 <rule name="ExcessiveClassLength" message="Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse." class="net.sourceforge.pmd.lang.apex.rule.complexity.ExcessiveClassLengthRule">
      <description>
      Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.
      </description>
        <priority>3</priority> 
      <example>
		<![CDATA[ 
public class Foo { public void bar(Integer x, Integer y, Integer z) { if (x>y) {
						if (y>z) {
							if (z==x) {
								// !! too deep
							}
						}
					}
				}
			}
		]]>
      </example>
    </rule>
	
	<rule name="NcssMethodCount" message="This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one." class="net.sourceforge.pmd.lang.apex.rule.complexity.NcssMethodCountRule">
      <description>
      This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.
      </description>
        <priority>3</priority> 
      <example>
		<![CDATA[ 
public class Foo extends Bar 
{ 
//this method only has 1 NCSS lines 
public Integer methd() { 
super.methd(); 
return 1; 
} } 
]]>
      </example>
    </rule> 
</ruleset>
